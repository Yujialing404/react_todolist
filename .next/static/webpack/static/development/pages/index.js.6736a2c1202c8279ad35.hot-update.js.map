{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.6736a2c1202c8279ad35.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/esm/readOnlyError.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./pages/index.js"],"sourcesContent":["export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","import { useState, useEffect } from 'react';\r\n \r\nfunction Example() {\r\n  //const [count, setCount] = useState(0);\r\n  //默认情况下 它会在第一次 render 和之后的每次 update 后运行\r\n  /* useEffect(() => {\r\n    document.title = `You clicked ${count} times`;\r\n  }); */\r\n    const [inputValue, handleInputChange] = useState('');\r\n    const [list, submit] = useState([]);\r\n\r\n    handleInputChange = (e) => {\r\n          inputValue = e.target.value\r\n      }\r\n      submit = () => {\r\n        list = [...list,inputValue];\r\n        inputValue = ''\r\n      }\r\n      remove = (index) => {\r\n        const list = [...list];\r\n        list.splice(index,1);\r\n      }\r\n  return (\r\n        <Fragment>\r\n            <input \r\n            value={inputValue}\r\n            onChange={this.handleInputChange}\r\n            />\r\n            <button onClick={this.submit}>Submit</button>\r\n            <ul>\r\n            {this.state.list.map((value,index) => {\r\n                return (\r\n                <div key={index}>\r\n                    <button onClick={this.remove.bind(this,index)}>Remove</button>\r\n                    <li>{value}</li>\r\n                </div>\r\n                )\r\n            })}\r\n            </ul>\r\n        </Fragment>\r\n  );\r\n}\r\nexport default Example;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;;;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;;;;A","sourceRoot":""}